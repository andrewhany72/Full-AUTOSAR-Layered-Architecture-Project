 /******************************************************************************
 *
 * Module: ModuleTest
 *
 * File Name: Dio_ModuleTest.c
 *
 * Description: Source file for the Dio Test Cases.
 *
 * Author: Andrew Hany
 ******************************************************************************/
#include <assert.h>
#include "dio.h"
#include "Port.h"
#include "Det.h"
#include "Mcu.h"
#include "tm4c123gh6pm_registers.h"

#define DIO_INVALIDE_CHANNEL_NUM 50

boolean Det_TestLastReportError(uint16 ModuleId, uint8 InstanceId, uint8 ApiId, uint8 ErrorId)
{
    boolean result = (Det_ModuleId == ModuleId) && (Det_InstanceId == InstanceId) &&
                     (Det_ApiId == ApiId) && (Det_ErrorId == ErrorId);
    Det_ModuleId = 0;
    Det_InstanceId = 0;
    Det_ApiId = 0;
    Det_ErrorId = 0;

    return result;
}

/************************************************************************************
* Test ID :TestCase1
* Description: Test for Write, Read and Flip Channel API's report a DIO_E_UNINIT DET
*              error in case the Dio_Init is not called yet.
* Pre-requisits: Dio Module is not initialized before Run this test case.
* Test Procedure : 1. Call Dio_WriteChannel DET error DIO_E_UNINIT should be reported.
*                  2. Call Dio_ReadChannel DET error DIO_E_UNINIT should be reported.
*                  3. Call Dio_FlipChannel DET error DIO_E_UNINIT should be reported.
*************************************************************************************/
void TestCase1(void)
{
    Dio_WriteChannel(DioConfig_LED1_CHANNEL_INDEX,STD_HIGH);
    assert(Det_TestLastReportError(DIO_MODULE_ID,DIO_INSTANCE_ID,DIO_WRITE_CHANNEL_SID,DIO_E_UNINIT));

    Dio_ReadChannel(DioConfig_SW1_CHANNEL_INDEX);
    assert(Det_TestLastReportError(DIO_MODULE_ID,DIO_INSTANCE_ID,DIO_READ_CHANNEL_SID,DIO_E_UNINIT));

    Dio_WritePort(DioConf_LED2_PORT_NUM, 0X04) ;
    assert(Det_TestLastReportError(DIO_MODULE_ID,DIO_INSTANCE_ID,DIO_WRITE_PORT_SID,DIO_E_UNINIT)) ;

    Dio_ReadPort(DioConf_LED2_PORT_NUM) ;
    assert(Det_TestLastReportError(DIO_MODULE_ID,DIO_INSTANCE_ID,DIO_READ_PORT_SID,DIO_E_UNINIT)) ;

#if (DIO_FLIP_CHANNEL_API == STD_ON)
    Dio_FlipChannel(DioConfig_LED1_CHANNEL_INDEX);
    assert(Det_TestLastReportError(DIO_MODULE_ID,DIO_INSTANCE_ID,DIO_FLIP_CHANNEL_SID,DIO_E_UNINIT));
#endif
}

/************************************************************************************
* Test ID :TestCase2
* Description: Test for Dio_Init and Dio_GetVersionInfo API's report the correct DET
*              error in case the API called with NULL pointer.
* Pre-requisits: No Need
* Test Procedure : 1. Call Dio_Init DET error DIO_E_PARAM_CONFIG should be reported.
*                  2. Call Dio_GetVersionInfo DET error DIO_E_PARAM_POINTER should be reported.
*************************************************************************************/
void TestCase2(void)
{
    Dio_Init(NULL_PTR);
    assert(Det_TestLastReportError(DIO_MODULE_ID,DIO_INSTANCE_ID,DIO_INIT_SID,DIO_E_PARAM_CONFIG));

#if (DIO_VERSION_INFO_API == STD_ON)
    Dio_GetVersionInfo(NULL_PTR);
    assert(Det_TestLastReportError(DIO_MODULE_ID,DIO_INSTANCE_ID,DIO_VERSION_INFO_SID,DIO_E_PARAM_POINTER));
#endif
}

/************************************************************************************
* Test ID :TestCase3
* Description: Test for Write, Read and Flip Channel API's report a
*              DIO_E_PARAM_INVALID_CHANNEL_ID DET error in case invalid Channel ID.
* Pre-requisits: Dio Module is initialized before Run this test case.
* Test Procedure : 1. Call Dio_WriteChannel DET error DIO_E_PARAM_INVALID_CHANNEL_ID
*                     should be reported.
*                  2. Call Dio_ReadChannel DET error DIO_E_PARAM_INVALID_CHANNEL_ID
*                     should be reported.
*                  3. Call Dio_FlipChannel DET error DIO_E_PARAM_INVALID_CHANNEL_ID
*                     should be reported.
*************************************************************************************/
void TestCase3(void)
{
    Dio_WriteChannel(DIO_INVALIDE_CHANNEL_NUM,STD_HIGH);
    assert(Det_TestLastReportError(DIO_MODULE_ID,DIO_INSTANCE_ID,DIO_WRITE_CHANNEL_SID,DIO_E_PARAM_INVALID_CHANNEL_ID));

    Dio_ReadChannel(DIO_INVALIDE_CHANNEL_NUM);
    assert(Det_TestLastReportError(DIO_MODULE_ID,DIO_INSTANCE_ID,DIO_READ_CHANNEL_SID,DIO_E_PARAM_INVALID_CHANNEL_ID));

#if (DIO_FLIP_CHANNEL_API == STD_ON)
    Dio_FlipChannel(DIO_INVALIDE_CHANNEL_NUM);
    assert(Det_TestLastReportError(DIO_MODULE_ID,DIO_INSTANCE_ID,DIO_FLIP_CHANNEL_SID,DIO_E_PARAM_INVALID_CHANNEL_ID));
#endif
}

/************************************************************************************
* Test ID :TestCase4
* Description: Test for GetVersionInfo API functionality.
* Pre-requisits: No Need
* Test Procedure : Call Dio_GetVersionInfo and get the required information.
*************************************************************************************/
#if (DIO_VERSION_INFO_API == STD_ON)
void TestCase4(void)
{
    Std_VersionInfoType Version_Info;
    Dio_GetVersionInfo(&Version_Info);
    assert(Version_Info.vendorID == DIO_VENDOR_ID);
    assert(Version_Info.moduleID == DIO_MODULE_ID);
    assert(Version_Info.sw_major_version == DIO_SW_MAJOR_VERSION);
    assert(Version_Info.sw_minor_version == DIO_SW_MINOR_VERSION);
    assert(Version_Info.sw_patch_version == DIO_SW_PATCH_VERSION);
}
#endif
/************************************************************************************
* Test ID :TestCase5
* Description: Test for Write and Read Channel API's functionality.
* Pre-requisits: Dio Module is initialized before Run this test case.
* Test Procedure : 1. Press SW1(PF4) then the Red led(PF1) shall be turned on.
*                  2. Press SW2(PF0) then the Red led(PF1) shall be turned off.
*************************************************************************************/
void TestCase5(void)
{
    uint8 SW1_Value = STD_HIGH;
    uint8 SW2_Value = STD_HIGH;

    /* Wait until the SW1 is pressed */
    while(SW1_Value != STD_LOW)
    {
        SW1_Value = Dio_ReadChannel(DioConfig_SW1_CHANNEL_INDEX);
    }

    /* Turn on the Red Led */
    Dio_WriteChannel(DioConfig_LED1_CHANNEL_INDEX,STD_HIGH);

    /* Wait until the SW2 is pressed */
    while(SW2_Value != STD_LOW)
    {
        SW2_Value = Dio_ReadChannel(DioConfig_SW2_CHANNEL_INDEX);
    }

    /* Turn off the Red Led */
    Dio_WriteChannel(DioConfig_LED1_CHANNEL_INDEX,STD_LOW);
}

/************************************************************************************
* Test ID :TestCase6
* Description: Test for Flip and Read Channel API's functionality.
* Pre-requisits: Dio Module is initialized before Run this test case.
* Test Procedure : 1. Press SW1(PF4) then the blue led(PF2) shall be flipped (OFF --> ON).
*                  2. Press SW2(PF0) then the blue led(PF2) shall be flipped (ON --> OFF).
*************************************************************************************/
#if (DIO_FLIP_CHANNEL_API == STD_ON)
void TestCase6(void)
{
    uint8 SW1_Value = STD_HIGH;
    uint8 SW2_Value = STD_HIGH;

    /* Wait until SW1 is pressed */
    while(SW1_Value != STD_LOW)
    {
        SW1_Value = Dio_ReadChannel(DioConfig_SW1_CHANNEL_INDEX);
    }

    /* Flip the Blue Led */
    Dio_FlipChannel(DioConfig_LED2_CHANNEL_INDEX);

    /* Wait until SW2 button is pressed */
    while(SW2_Value != STD_LOW)
    {
        SW2_Value = Dio_ReadChannel(DioConfig_SW2_CHANNEL_INDEX);
    }

    /* Flip the Blue Led */
    Dio_FlipChannel(DioConfig_LED2_CHANNEL_INDEX);
}
#endif

/**************************************************************************************
 * Test the Read/Write Port API if:
 *
 * 1) Writing on an input channel (The write operation shall not be done only on that channel)
 *    but the values of all other output channels in the port shall be written
 **************************************************************************************/
void testCase7(void)
{
    /* write only the output pins of the leds */
    Dio_WritePort(DioConf_LED2_PORT_NUM, 0x02) ;
    /* read the value of the data register after the write operation is done */
    Dio_ReadPort(DioConf_LED2_PORT_NUM) ;
    Dio_WritePort(DioConf_LED2_PORT_NUM, 0x0C) ;
    /* write on the input pins of the switch */
    Dio_WritePort(DioConf_LED2_PORT_NUM, 0x07) ;
    /* read the data and check if PF4 is written to 0 or not */
    Dio_ReadPort(DioConf_LED2_PORT_NUM) ;
}

/**************************************************************************************
 * Test the Read/Write channel group API if:
 *
 * 1) Writing on an input channel (The write operation shall not be done only on that channel)
 *    but the values of all other output channels in the group shall be written
 **************************************************************************************/
void testCase8(void)
{
Dio_ReadChannelGroup(&Dio_PortfLedsGroup) ;

    while(Dio_ReadChannel(DioConfig_SW1_CHANNEL_INDEX))
    {
        /* No Action */
    }
    Dio_WriteChannelGroup(&Dio_PortfLedsGroup, 0x07) ;
    Dio_ReadChannelGroup(&Dio_PortfLedsGroup) ;

    while(Dio_ReadChannel(DioConfig_SW2_CHANNEL_INDEX))
    {
        /* No Action */
    }
    Dio_WriteChannelGroup(&Dio_PortfLedsGroup, 0x00) ;
    Dio_ReadChannelGroup(&Dio_PortfLedsGroup) ;

    /* Configure The Green Led to be output channel */
    Port_SetPinDirection(PORT_F_PIN_3_INDEX, PORT_PIN_OUT);
    while(Dio_ReadChannel(DioConfig_SW1_CHANNEL_INDEX))
    {
        /* No Action */
    }
    Dio_WriteChannelGroup(&Dio_PortfLedsGroup, 0x07) ;
    Dio_ReadChannelGroup(&Dio_PortfLedsGroup) ;
}

/**************************************************************************************
 * Test the set pin direction API if:
 *
 * 1) The direction is changeable during the runtime
 * 2) The direction is not changeable during the runtime
 **************************************************************************************/
void testCase9(void)
{
    Port_SetPinDirection(PORT_A_PIN_3_INDEX, PORT_PIN_OUT);
    Port_SetPinDirection(PORT_A_PIN_4_INDEX, PORT_PIN_OUT);
}

/**************************************************************************************
 * Test the set pin mode API if:
 * 1) Mode is supported by the pin and the Mode changeability during runtime is enabled
 * 2) Mode is supported by the pin and the Mode changeability during runtime is disabled
 * 3) Mode is not supported by the Port pin but the mode changeability during runtime is enabled
 *************************************************************************************/
void testCase10(void)
{
    /* Change the mode of PB0 to UART1 RX */
    Port_SetPinMode(PORT_B_PIN_0_INDEX, 1);

    /* Change the mode of PB1 to UART1 TX */
    Port_SetPinMode(PORT_B_PIN_1_INDEX, 1);

    /* Change the mode of PB4 to CAN0 RX */
    Port_SetPinMode(PORT_B_PIN_4_INDEX, 3);
}


int main(void)
{
    /* Initialize the clock for all ports */
    Mcu_Init() ;

    Port_Init(&Port_Pins[0]) ;

    /* Run the First Test Case */
    TestCase1();

    /* Initialize the Dio Driver */
    Dio_Init(&Dio_Configurations);

    /* Run the Second Test Case */
    TestCase2();

    /* Run the Third Test Case */
    TestCase3();

#if (DIO_VERSION_INFO_API == STD_ON)
    /* Run the Forth Test Case */
    TestCase4();
#endif

    /* Run the Fifth Test Case */
    TestCase5();

#if (DIO_FLIP_CHANNEL_API == STD_ON)
    /* Run the Sixth Test Case */
    TestCase6();
#endif
     /* Run the 7th test case */
    //testCase7() ;

    /* Run the 8th test case */
    testCase8() ;

    /* Run the 9th test case */
    testCase9() ;

    /* Run the 10th test case */
    testCase10();
}
